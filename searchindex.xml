<?xml version="1.0" encoding="utf-8" standalone="yes"?><search><entry><title>以Obsidian为核心构筑第二大脑</title><url>https://qz757.github.io/post/productivity/%E4%BB%A5obsidian%E4%B8%BA%E6%A0%B8%E5%BF%83%E6%9E%84%E7%AD%91%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91/</url><categories><category>生产力</category></categories><tags><tag>第二大脑</tag></tags><content type="html"> 简介 第二大脑就像我们个人为自己构建的个人图书馆，并且我们有个人独特的关联、索引系统，在我们需要时，可以快速从中提取中我们需要的信息，完成我们的内容获取和输出。 因此，为了满足我的第二大脑知识体系构筑，我了解了多种笔记方法进行试用，最终选择了适合自己学习状态的笔记方法，并进行组合，最终形成自己的方法和工具流。以下，我将对笔记方法的选择、匹配以及实现进行说明。
一、目的 首先要搞清楚为什么需要个人第二大脑系统，因为我们的大脑产生的想法，会远大于能够精准存储的数量，例如平时在工作、生活中，总是会在看到某个电影、某个景色或者读到某一本书的某一段话时，产生各种各样的灵感，但是无法成系统，或者是看过一本书、一篇文章后，想要用的时候发现找不到，当时做的读书笔记等信息也散落各处，无法快速使用，因此需要在大脑之外构建第二大脑，将散落各处的灵感、笔记等知识汇总到一起，需要使用时便能快速从第二大脑加载到”第一大脑中“；
二、第二大脑工作流 构筑第二大脑，不只是需要选择一个笔记系统，然后实时记录下笔记这么简单，而是需要对我们平时的工作、学习、读书流程做一个整体的规划，因为我的工作内容的原因，我这里不做工作类第二大脑的构建，只做生活中学习、随想、知识拓展类的流程设计。首先来看下整体思路： 这个流程有参考老石在b站的视频，需要可以看看：
我会从内容积累、重点提取和信息整合三个阶段来介绍第二大脑是如何工作的；在此之前，先介绍下在重点提取阶段需要用到的笔记法的选择；
三、笔记方法选择 第二大脑的基础是有合理的笔记方法进行支撑，因此需要选择适合自己的笔记方法，因此通过对不同笔记方法的了解，最终选用了PARA笔记法和卢曼卡片盒笔记法结合作为自己的第二大脑基本的笔记方法，同时也使用子弹笔记或者只是使用flomo对平时的事物和灵感进行记录。
Ⅰ、P.A.R.A.笔记法 1、什么是P.A.R.A.笔记法 P.A.R.A 的作者是 Tiago Forte，是世界上最著名的生产力专家之一。他通过自己的项目在全世界教育了 2 万多人，并撰写和演讲技术如何帮助知识工作者彻底改变他们的个人效率。Tiago 的在线课程《打造第二大脑（Building a Second Brain）》已经有来自 70 多个国家的 1000 多名学生参加了该课程。
2、P.A.R.A.笔记法的定义 P.A.R.A. 是 项目（Project）、领域（Area）、资源（Resource）、 档案（Archive)的简称。 这四个一级分类涵盖了你在工作和生活中可能遇到的所有类型的信息。下面是每个模块的定义，也是这套方法论的核心。
项目： 具有明确的目标以及时间范围，是最小执行单位 领域： 你日常需要精进的领域（所以你需要为此负责） 资源： 你感兴趣的事情，也是支撑现在 Area 和将来 Area 的外部知识储备 归档： 沉寂的内容，但也许对未来有用 **围绕 Area 的精进，我们需要不断吸收外部的有效信息和进行阶段性的「创作」，**而阶段性的创作需要的主题，可以是 Area 的拆分，也可以是基于 Project 的抽象和总结，但来源主要是通过实践（Project）和理论来进行的（即 Resource——外部参考、经验、方法论）。
3、P.A.R.A.的工作流程 P.A.R.A.是一个动态系统，是需要知识在四个类别之间不断流动，通过一个个项目充实我们的领域，在此过程我们会积累很多的resource，以此来充实我们的领域，同时也会完善我们的项目，归档的知识可以供以后不断使用。
4、参考 本章节很多地方参考了产品沉思录的P.A.R.A. 的 Notion 实践，对P.A.R.A.和Notion有兴趣的可以看下原文。
Ⅱ、卢曼卡片盒笔记法(the Zettelkasten Method) 1、什么是卡片盒笔记法 卡片盒笔记系统是一款个性化的，用于思考和写作的工具。它具有超文本(hypertext)的特点，让你的所思所想互相连接形成网络。与其他系统不同的是，你创造的是一张由你的想法、看法、灵感、或者遇到的具体的知识组成的思想之网(web of thoughts)，而不是孤立的笔记。它强调笔记之间的连接关系，而非把所有笔记堆在一起。 原子化的笔记就是一条想法(One thought)，而卡片盒笔记系统就是由想法组成的想法之网(web of thought)；因此我们要给每条笔记设置唯一的编号，并且将相关的笔记链接起来，就形成了我们的笔记网。 卡片盒笔记系统是个性化的思考和写作的工具，他不是目的，二十手段：
它是如同网页一般的超文本； 它坚持笔记原子化的原则(Atomicity)； 它是个性化的； 2、一个卡片笔记的内容 单个笔记或者说 Zettel 是什么样的呢？每条笔记由三部分组成：
唯一标识符：它为你的笔记提供一个明确的地址； 笔记的正文：这是你记录的笔记内容，一般为一段简短的原子化的信息，必须是自己的语言写下的，不要是招录或者直接拷贝； 参考文献：如果你的内容来源于外部，你可以在每条笔记的底部写上信息来源，如果你记录的是你自己的想法，则留空。 一个完整的卡片笔记是这样的： 3、哪些笔记应该进入卡片盒 虽然你可以在笔记里写任何东西，但是我建议输入知识而非信息(Knowledge instead of information)。 在完成一个项目的过程中，我们会产生很多与项目相关但是必须要在本次项目中体现的副产品，那这些想法建议也放入卡片盒中，除非你知道这个想法以后永远不会用到，如果不确定，就记录下来，因为这些想法很可能会让你产生更丰富的想法，有一天如果用到可以通过卡片盒迅速找到。 但是还是建议在一个项目过程中不要偏离主线太多，当然集中精力或者允许一些偏离，这与 卡片盒笔记系统Method 无关，更多的取决于你个人的情况。
4、卡片盒笔记的实践 软件选择：Obsidian
能够创建超文本 全文搜索和跟随链接 沙盒功能 网状图 实现
使用Obsidian的zk卡片功能，创建和管理卡片盒笔记； 通过将相关的卡片链接，形成网状图； 通过标签构建索引； 5、参考 卡片笔记思路主要参考了：卢曼卡片盒笔记法介绍，更详细的信息可以参见原文。
Ⅲ、子弹笔记 1、什么是子弹笔记 作为前手账er，子弹笔记（bujo）久仰大名，去掉锦上添花的排版装饰，bujo的核心其实是一种“快速记录”的方式，bullet，像子弹一样快。 只需要掌握3种符号就够了：
●点：任务（task） ○圆圈：事件（event） -横线：笔记短句（note） 至于如何标记任务的完成、推移、删除等，都可以按自己的喜好（这3个符号也可以替换）。 2、使用方法 子弹笔记结构主要包括3个部分：
目录（index） 每日记录（daily log） 个性化集子（collection） 虽然通常来讲还有月度记录（monthly log）和未来记录（future log），不过这些我通常都一并算在个性化集子里。 虽然网上介绍bujo的视频文章很多，但还是推荐阅读子弹笔记创始人赖得·卡罗尔的《子弹笔记》，关于为什么他选择用这些符号而不是其他，有很详细的介绍。里面提到的丰田“五问法”用来拆解问题也非常好用。
五问法：写下你的问题，然后问自己5个相关的why，然后得到5个小问题。可无限下分。
子弹笔记主要协助于我的日常手记，尤其是在脱离了电脑的时候，一部分需要画图的笔记手写也更方便，一周内反复横跳，纸质比电子来得更简易，需要留存的部分进入笔记系统，剩下的部分可以直接丢弃。 集子既可以看成是一条笔记，可以直接整理进resource，也可以看成是一个Area，链接更多已有笔记，灵活方便。
3、参考 子弹笔记现在还用的比较少，思路主要参考了：PAPR，Slip-box，Bullet Journey：个人笔记管理系统探索 vol.1，更详细的信息可以参见原文。
Ⅳ、总结 以上是我第二大脑的笔记方法设计会用到的几种笔记方法，我的笔记方法会在后边章节（ 五、重点提取 ）中详细讲解。
四、内容积累 所有知识的积累肯定是从内容获取和积累开始的，不论是看书、看视频、看文章/博客，还是在不经意的环境下产生的灵感，都是需要能够快速将这些信息记录下来，方便以后整理归纳。 以前的做法是在浏览器、不同的APP、笔记、便签等不用的地方收藏、零散记录，结果就是微信收藏夹、浏览器书签、各类APP收藏了大量网页和信息，但是想要用的时候还是找不到，也没有积累出自己的知识，因此我对内容积累类的工具和使用也做了精简和筛选，固定了固定了个人的内容积累途径以及方法。分为读书、灵感记录、稍后阅读三类，以下是我针对自己的使用情况选择的具体APP和流程。
Ⅰ、阅读 阅读：Kindle，使用Kindle进行阅读和读书笔记的初始记录，主要在手机使用，Kindle的读书笔记可以直接导出，方便后边整理；
Ⅱ、手写笔记 手写笔记：享做，主要在Pad使用，现在用的比较少；
Ⅲ、稍后阅读 Pocket，遇到好的文章，或者来不及读的文章，微信、知乎、CSDN、简书等，都能快速保存到Pocket； 只保存单篇阅读类文章，如果是类别、功能类网站，请参考六、网页收藏夹
Ⅳ、RSS/NewsLetter Feeder+kill the newsletter，feeder用来订阅RSS，kill the newsletter（地址）将newsletter转为RSS，在feeder统一订阅查看； 我的订阅地址：
xxx kill-the-newsletter Sign up for the newsletter with xxx@kill-the-newsletter.com Subscribe to the Atom feed at https://kill-the-newsletter.com/feeds/p45zjdkox5ouu351.xml Ⅴ、灵感记录 flomo，使用flomo快速记录实时产生的想法，可以通过微信、APP、网页等各种途径快速记录；
Ⅵ、网页收藏夹 pinbox：使用pinbox收藏功能、网站类地址，空闲时间可以在这里看收藏的网站； iTab，Chrome插件，web地址，方便收藏的地址快速查看； Ⅶ、其他资讯类 bilibili：学习类资源很多； CSDN、知乎、少数派、简书等； 中国大学MOOC、网易云课堂、网易公开课； Ⅷ、辅助工具 Clash：外网访问 五、重点提取 重点提取是第二大脑构建最关键的一步，通过内容积累，我们已经获取到大量的资讯、内容等信息，但是并未转化成自己的系统信息，因此要定期对自己积累到的内容进行整理，提取重点，提取后，用自己的语言记录下来的内容才是知识，而不是资讯或者内容。这一步可以认为是卡片笔记法中生成了大量单点知识的卡片。将读书笔记（Kindle导出）、灵感记录（flomo）以及Pocket高亮记录到Obsidian卡片中，纪录时用自己的语言来写，不止是放入原文的内容，这样就会生成一个个知识点，并通过Obsidian的链接功能，将相关的文章关联起来，方便以后学习、查找，这个阶段，我是使用Obsidian来完成的，软件具体的使用可以参考的另外一篇文章Obsidian作为第二大脑工具的基本使用和配置;
以下是我针对个人的习惯采用的满足自己要求的笔记方法。
Ⅰ、总体思路 **个人笔记管理系统 = PARA + 卡片盒 + Bujo/flomo ** PARA作为总体方法，卡片盒作为其中的Resource提供资源，Project作为当前正在进行的项目，Area是需要持续积累的领域，Archives是已完成的项目，需要输出的整理成Blog输出。
笔记总原则：
以1张卡片为单位 1张卡片=1个内容=1个Resource Projects是进行中的项目，内容来源于多个resource Areas的内容是用标签生成的Archives、Projects、ZK卡片列表，标签与Area对应； Archives的内容必须来源于Projects，一个Project完成后归档到Archives； Archives归档至Blog； Resources的内容来自bujo、flomo、Kindle读书笔记等 每张Resources卡片必须有至少一个反向链接 未进入PARA的内容都需要被删除（所以纸质笔记记完可扔，当然也可以留作纪念） 标签总原则：
索引类标签：用来生成索引，与Area对应，每篇文章至少有一个索引类标签；但是也不能有超过三个索引类标签，否则是Area划分有问题；命名规则：生产力-Index； 搜索类标签：详细的、每篇文章可根据情况增加的标签，方便后边搜索某一个小分类的文章，无命名规则； Ⅱ、具体实现和目录结构 首先是ZK卡片的001-SlipBox-滑箱盒子，分为： **FleetingBox-灵感盒子：**随时产生的想法，但是未形成完整内容的卡片，也可以认为是未完成的卡片； **LiteratureBox-文献盒子：**一个完成的Resource卡片，但是并未用到具体的项目或归档的项目； **PermanentBox-永久盒子：**已完成，且被至少一个项目使用了的卡片； **002-Area-领域：**也可以认为是Goal，提升个人某个领域能力，或者在某个领域做持续积累和总结，通过标签生成列表；具体生成方法请参考： **003-Project-项目：**是正在进行的项目，内容主要来源于盒子卡片； **004-Archive-归档：**已完成的项目会整理到归档中，供后续查阅。 Ⅲ、使用流程 整体使用流程如下： 并且在Obsidian关系图谱中根据习惯按照将不同的目录设置成不同的颜色，这样就能快速区分出进行中和已完成的项目、卡片等；
Ⅳ、参考 目录结构的设计参考了：用Obsidian实现Zettelkasten看这一篇就够了，更详细的信息可以参见原文。
六、信息整合 在重点提取后，我们在知识管理系统中生成了大量单点知识的卡片，但是并未形成完整的体系或者可以直接当做完整的知识输出，因此需要对信息进行整合，输出完整的文章，并将文章、卡片归档到对应的领域，方便以后使用时快速找到。 文章输出我使用Typora写博客，快速发布到简书，并且通过GitHub Actions快速发布到GitHub和Gitee Pages，具体流程可以参考GitHub和Gitee博客自动发布流程
标签 Index： #生产力-Index
Info： #第二大脑
参考文献 产品沉思录的P.A.R.A. 的 Notion 实践 卢曼卡片盒笔记法介绍 PAPR，Slip-box，Bullet Journey：个人笔记管理系统探索 vol.1 用Obsidian实现Zettelkasten看这一篇就够了</content></entry><entry><title>利用GitHub-Actions将Hugo博客自动发布到GitHub和Gitee Pages</title><url>https://qz757.github.io/post/productivity/%E5%88%A9%E7%94%A8github-actions%E5%B0%86hugo%E5%8D%9A%E5%AE%A2%E8%87%AA%E5%8A%A8%E5%8F%91%E5%B8%83%E5%88%B0github%E5%92%8Cgitee-pages/</url><categories><category>生产力</category></categories><tags><tag>Hugo</tag><tag>GitHub</tag></tags><content type="html"> 简介 现在个人博客通常有比较多的选择，如果不想要自己购买服务器实现静态博客的发布，可以在简书、CSDN等平台建立自己的账号并发布，但是原始数据无法在本地管理；如果想要数据完全自己管理，可以使用GitHub或者Gitee Pages功能发布自己的博客，利用Hugo或Hexo等成熟的静态博客将md文件转换成静态网站文件进行快速发布。本文就用来记录如何快速将博客发布到简书、GitHub以及Gitee Pages三个平台。
一、流程设计 我希望的流程当然是主要精力用在写文章，发布的流程最好完全不需要手动处理，但实际情况下手动发布博客的流程大体是：
编写->拷贝到简书->本地Hugo生成文件->提交到Github->提交到Gitee->Gitee页面刷新； 流程相对比较多，希望能够编写完md后只需要把源文件提交到GitHub即可实现GitHub和Gitee Pages的自动化部署。
之前有使用过Travis CI+GitHub+Hexo自动发布到GitHub Pages，但是GitHub的访问经常不那么靠谱，因此想着也能同步到Gitee，并且自动构建Hexo的速度受Nodejs环境部署影响，速度很慢，因此本次计划采用Hugo来构建网站文件，整体流程设计如下：
二、环境准备 为了满足博客自动发布流程，首先需要在本地准备好生产环境，以满足快速发布，以此的复杂是为了长期的简单，因此在环境准备阶段我会把所有涉及的工具都记录下来，以方便大家使用以及后边自己回顾，环境准备包含：
Typora配置 Git配置 Hugo配置 Obsidian配置 Ⅰ、Typora配置 1、Typora基本配置 Obsidian完成知识积累后，按照ZK->Project->Archive->Blog的流程发布Blog，但是Obsidian的文件相互关联，且附件如何快速复用，需要对Typora和Obsidian都进行简单的配置，确保后续Blog能够快速完成并发布，并且文件仍在Obsidian工程中正常显示；
Typora非常的简洁，而且可以实时预览，在写博客的时候经常会插入一些图片，截图后可以直接粘贴进去，图片也会自动保存在本地，这里需要注意图片的保存路径，在偏好设置里，设置插入图片时复制到指定路径（./resource/），这样复制的图片就会自动保存在当前文件夹下的resource文件夹里，方便后续管理与转移。
2、使用Typora+picgo-core+gitee实现图床功能 安装Nodejs
windows7安装
a. 从官网下载对应版本，win7可用最新版本为：v13.14.0；win10/win11可下载最新版本；
b. 运行安装即可；
ubuntu 20.04安装
ubunut仓库中默认的Nodejs版本是v10.19.0，不是最新的版本，因为我用到的其他包需要依赖高级版本，因此安装v14版本；
a. 安装NodeSource：curl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash -，这个脚本将会添加 NodeSource 的签名 key 到你的系统，创建一个 apt 源文件，安装必备的软件包，并且刷新 apt 缓存；如果你需要另外的 Node.js 版本，例如12.x，将setup_14.x修改为setup_12.x；
NodeSource 软件源提供了以下版本：
v14.x - 最新稳定版 v13.x v12.x - 最新长期版本 v10.x - 前一个长期版本 b. 安装Nodejs和npm：sudo apt install nodejs，安装的版本node -v可查看是v14.18.2；
配置npm
配置npm源为淘宝源，命令如下：
npm config set registry https://registry.npm.taobao.org npm config get registry 安装picgo
方法一、在上传服务中点击PicGo-Core(command line)
自动下载的目录为：%AppData%\Typora\picgo
方法二：在上传服务中点击Custom Command，打开终端，输入以下命令：
sudo npm install --no-optional --verbose picgo -g #跳过可选依赖 在Gitee创建图床仓库
a. 注册一个码云（gitee）账号 b. 创建一个仓库（加号） c. 仓库设定 d. 创建gitee访问token
新建token，点击头像 e. 配置picgo
打开终端输入以下命令，如果是自动安装，需要将picgo目录加入path，或者在picgo目录执行命令：
#安装gitee的插件 picgo install gitee-uploader #设置配置文件 picgo set uploader 1.按上下键找到gitee，回车 2.repo：用户名/仓库名 （打开自己的仓库，浏览器里的网址username/reponame） 3.token：刚才生成的token 4.path:路径，图片上传到仓库的目录，例如img，即上传到仓库的img目录 5.custompath:不用填，回车 6.customURL:不用填，回车 #使用配置好的文件（配置文件在~/.picgo/config.json） picgo use uploader 测试上传功能
打开你typora，验证图片上传，查看是否成功； 成功设置好图床，将一张图片拖到typora中，试一下能否自动上传 手动上传图片可参考：picgo gitee仓库； Ⅱ、Git配置 1、Git下载安装 去官网下载git; 运行安装，选择安装路径，其他默认即可； 2、基本配置 配置全局用户名和邮箱 git config --global user.name "用户名" git config --global user.email "邮箱" 生成公钥 ssh-keygen -t rsa -C "邮箱地址" 在.ssh文件生成id_rsa和id_rsa.pub两个文件；
3、配置公钥到github setting->SSH and GPG keys：new SSH Key；
4、配置公钥到gitee； 设置->ssh公钥->添加公钥；
Ⅲ、Hugo安装配置 Hugo 是一个基于Go语言开发的静态博客框架，号称世界上最快的构建网站工具；
1、安装 Windows安装：在hugo github下载windows版本包，解压到目录，并添加到PATH即可； Ubuntu安装：sudo apt-get install hugo 2、生成博客 命令为：hugo new site myblog myblog为博客的目录名，可以修改为你自己想取的名字，生成的目录如下： 3、主题下载 在hugo主题网站找到喜欢的主题，我选的是hexo主题，可以在next主题的github地址hugo-theme-next下载; 可以下载主题压缩包，解压到themes文件夹下，也可以直接使用git clone到themes目录下； 4、主题配置 将【exampleSite\config】和【exampleSite\content】两个目录拷贝到站点根目录下； content目录下有en和zh_CN两个目录，分别放英文和中文两个页面的md文件，默认的md文件可以删除，将需要发布的文章放入这两个目录即可； config目录下_default目录对站点的侧栏等功能进行配置，可以根据自己需要进行配置； 5、主题修改 由于默认主题生成的文章页面有些功能是不需要的，因此需要对themes下文件进行修改： single.html修改，删除文章页面不需要的几个信息； rss.html，直接删除文件内容即可； comment.html修改为自己的评论功能代码，我使用的是utteranc，可以参考5、配置评论功能]； foot.html，删除页脚不需要的信息 6、快速复制当前配置 将config、content和themes三个目录拷贝到新创建的站点目录，将content下替换为文章文件即可。
7、配置评论功能 utterances是一款基于Github Issue的Github工具，优点主要是无广告、加载快、配置简单，轻量开源。 由于utterances是一款Github App，因此安装utterances非常简单，只需要授权特定repo权限给utterances就可以了,注意一个点：授权的这个repo必须是public的，可以选择多个repo，但是建议选择一个就可以了，也比较安全。
给出我授权的repo作为参考，我是选择博客的repo作为utterances评论的存放点(在博客评论的内容都会以issue的形式发布在repo下). 将插入评论代码加到主题模板中： &lt;script src="https://utteranc.es/client.js" repo="qz757/qz757.github.io" issue-term="title" theme="preferred-color-scheme" crossorigin="anonymous" async> &lt;/script> 这是当前最简单的配置方法， 也可以在utterances官方查看其他配置方法，以及详细的配置参数说明。
8、Hugo常用命令 hugo server本地启动服务进行预览，localhost:1313访问； hugo生态静态网页文件到public目录； hugo -b url，制定baseurl生成网页文件，所有文章的链接前缀都是以此生成的； hugo new post/first.md，用模板生成md文件 Ⅳ、Obsidian配置 Obsidian的安装和使用可参考我的另一篇文章：Obsidian作为第二大脑工具的基本使用和配置
三、实现方案 所有环境准备好后，终于要开始启动我们的自动化流程的实现了；
Ⅰ、GitHub和Gitee Pages配置 Gitee Pages配置： 创建与用户名同名仓库； 仓库主页->服务->Gitee Pages，选择对应的分支并开启https； GitHub Pages配置： 创建名称为【用户名.gthub.io】的仓库； 仓库主页->setting->Pages，选择对应的分支； Ⅱ、GitHub同步到Gitee鉴权私钥配置 参考git配置生成公私钥，并将公钥配置到Gitee； 将私钥配置到GitHub仓库，Pages仓库主页->Settings→Secret→New repository secre 用于GiuHub Action提交代码到Gitee的鉴权，命名为GITEE_RSA_PRIVATE_KEY，将私钥填入； Ⅲ、GitHub仓库代码更新Token配置 生成GitHub账号的 personal access token 将仓库权限选上就行了，然后将生成的token，配到私钥配置的地方 仓库→Settings→Secret→New repository secre，命名为ACCESS_TOKEN； Ⅳ、配置Gitee密码到Github用于自动部署Gitee Pages工程 同之前步骤相同，将Gitee密码配置到GitHub Secrets，命名为：GITEE_PASSWORD，所有配置结果如下： Ⅴ、编写Actions脚本 synctogitee.yml
name:deploy blog to giteeon:push:branches:- master # master 分支 push 的时候触发jobs:deploy:#执行部署Hugo生成静态代码，默认放在gh-pages分支runs-on:ubuntu-18.04steps:- uses:actions/checkout@v2with:submodules:true# Fetch Hugo themes (true OR recursive)fetch-depth:0# Fetch all history for .GitInfo and .Lastmod- name:Setup Hugouses:peaceiris/actions-hugo@v2with:hugo-version:'0.90.1'extended:true#不需要extended版本就可以注释- name:Build github# 我的Hugo配置baseurl为GitHub Pages路径，使用hugo命令默认为GitHub Pages生成静态网站run:hugo- name:Deploypage# 部署到GitHub Pages分支uses:peaceiris/actions-gh-pages@v3with:personal_token:${{ secrets.ACCESS_TOKEN }}external_repository:qz757/qz757.github.iopublish_branch: gh-pages # default:gh-pagespublish_dir:./public- name:Build gitee# 指定baseurl为giee Pages的url生成Gitee网站静态文件；run:hugo -b https://qz757.gitee.io- name:Deploygitee# 部署到Gitee对应的分支，该步骤是部署到GitHub仓库的对应分支uses:peaceiris/actions-gh-pages@v3with:personal_token:${{ secrets.ACCESS_TOKEN }}external_repository:qz757/qz757.github.iopublish_branch: gh-pages-gitee # default:gh-pagespublish_dir:./publicsync:#同步到gitee仓库needs:deployruns-on:ubuntu-lateststeps:- name:Sync to Giteeuses:wearerequired/git-mirror-action@masterenv:SSH_PRIVATE_KEY:${{ secrets.GITEE_RSA_PRIVATE_KEY }}with:# 来源仓库source-repo:"git@github.com:qz757/qz757.github.io.git"# 目标仓库destination-repo:"git@gitee.com:qz757/qz757.git"reload-pages:needs:syncruns-on:ubuntu-lateststeps:- name:Build Gitee Pagesuses:yanglbme/gitee-pages-action@mainwith:# 注意替换为你的 Gitee 用户名gitee-username:qz757# 注意在 Settings->Secrets 配置 GITEE_PASSWORDgitee-password:${{ secrets.GITEE_PASSWORD }}# 注意替换为你的 Gitee 仓库，仓库名严格区分大小写，请准确填写，否则会出错gitee-repo:qz757/qz757# 要部署的分支，默认是 master，若是其他分支，则需要指定（指定的分支必须存在）branch:gh-pages-giteeⅥ、绑定Gitee账号到微信公众号 需要绑定Gitee账号到微信公众号，否则最后一步reload pages自动部署Gitee Pages会登录失败，原因是需要短信验证；绑定公众号后则不需要短信验证；其他问题解决可以参考gitee-pages-action
Ⅶ、自动发布 将Hugo生成的工程文件整体提交到GitHub Pages工程master分支； 查看Actions执行结果完成后，GitHub和Gitee Pages已自动部署完成； 四、后续使用 在Typora完成文章编写后，一键上传所有图片到Gitee图床，拷贝发布到简书，然后提交到GitHub repo master分支，即可自动部署到GitHub和Gitee Pages；
结束 以上就是我利用GitHub-Actions将Hugo博客自动发布到GitHub和Gitee Pages，希望可以帮助大家快速构建自己的个人网站；后边我会继续完善我的第二大脑系统的构建思路和方法。
标签 Index： #生产力-Index
Info： #Obsidian</content></entry><entry><title>关于我</title><url>https://qz757.github.io/about.html</url><categories/><tags/><content type="html"> 这是Ethan的博客空间，一个coder，一个技术Leader，同时也是一个希望生活更有趣，坚持思考的人。
更多信息请访问GitHub.</content></entry><entry><title>Obsidian作为第二大脑工具的基本使用和配置</title><url>https://qz757.github.io/post/productivity/obsidian%E4%BD%9C%E4%B8%BA%E7%AC%AC%E4%BA%8C%E5%A4%A7%E8%84%91%E5%B7%A5%E5%85%B7%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%92%8C%E9%85%8D%E7%BD%AE/</url><categories><category>生产力</category></categories><tags><tag>Obsidian</tag></tags><content type="html"> 简介 作为第二大脑系统的笔记软件，本片我们来讲一下Obsidian的基本使用和配置。关于“第二大脑系统笔记方法选择和软件选型”我会单独写一篇Bolg进行说明。作为第二大脑系统的笔记，需要满足日常笔记的快速编写，并且能够支持PC、手机、Pad多平台同步，同时Obsidian支持通过插件进行扩展，因此我将分基本功能使用和配置、核心插件配置和使用、第三方插件配置和使用、工作区布局几个维度进行说明。
一、为什么选择Obsidian 关于我的第二大脑系统构筑的思路、方案以及选型，我会单独写一篇《第二大脑系统笔记方法选择和软件选型》进行说明，可以参考这边文章。
二、Obsidian基本功能使用和配置 Ⅰ、下载安装 下载：Obsidian官网； 选择对应的版本下载安装； Ⅱ、打开工程 打开文件夹当做工程，如果是空文件夹，则会将文件夹名当做工程名； 也可以新建工程； 配置工程语言为中文； Ⅲ、创建新文件夹和文件 与其他编辑器类似，可以直接创建新文件夹和文件，创建的文件为md格式； Ⅳ、对Obsidian进行基本配置 1、文件与链接配置 修改文件链接的描述使用MarkDown标准语法，确保和Typora一致，同时配置附件拷贝目录为当前文件坐在resource目录，可以同Typora一致；
2、外观配置 在外观配置页签可以选择黑暗或者明亮模式； 主题配置： 1、将下载好的Minimal.css文件放到.obsidian/themes，没有该文件夹则手动创建，修改后在外观标签页更改主题为minimal； 2、通过Minimal-theme-setting插件对主题进行调整，安装后默认配置即可，可参考 ：第三方插件配置和使用；
3、快捷键配置 在快捷键页签修改或增加快捷键： ALT+S 文件列表：在文件列表中显示当前文件 ALT+Z 打开局部关系图 CTL+SHIFT+X：切换工作区
4、关于页签（语言、自动更新） 在关于页签对软件自动更新、语言等进行修改配置；
5、核心插件配置 核心插件的配置和使用可参考：核心插件配置和使用
6、第三方插件配置 第三方插件的配置和使用可参考：第三方插件配置和使用
7、快速切换配置 快速切换可根据需要进行配置
8、命令面板配置 在命令面板添加置顶命令：
Ⅴ、常用命令 CTL + P：打开命令面板； CTL + E：切换编辑和预览视图； ALT+S ：文件列表：在文件列表中显示当前文件； ALT+Z ：打开局部关系图； CTL+SHIFT+X：切换工作区； CTL+O：快速切换编辑文件； 三、核心插件配置和使用 Ⅰ、核心插件使用列表 Ⅱ、主要插件使用说明 1、关系图谱 关系图谱是选择Obsidian作为知识系统构建团建的主要原因之一，他可以清晰地看出来文章之间的联系，相信选择Obsidian的同学不会对这个功能陌生；关系图谱的颜色可以根据标签、文件夹等维度进行配置，我是以文件夹为粒度进行配置的；
2、模板 模板功能是在写文章过程中可以插入模板文件夹中某个模板的内容到当前文件，或者在创建文件时直接以模板为基础创建，可与 Calendar、Periodic Notes、QuickAdd、ZK卡片等插件配合使用，快速创建出不同维度的笔记；
3、ZK卡片 ZK卡片插件是支持卢曼卡片盒笔记法的插件，可以方便创建出卡片笔记；
4、其他核心插件 其他核心插件功能很简单，可以根据需要随时打开或关闭，插件打开后，都会在配置页面的左边列表出来一个对应的配置选项，对每个插件进行配置。
四、第三方插件配置和使用 Obsidian的开放性吸引了大量开发人员开发了很多实用的第三方插件，接下来就讲一下第三方插件的安装和配置使用。
Ⅰ、第三方插件安装 1、插件下载 我的插件下载地址：宏沉一笑 / obsidian-plugin，这是从github定期同步到gitee的obsidian插件源；
2、插件安装 将对应插件目录拷贝到obsidian安装目录下的.obsidian/plugins下，同时关闭【设置】->【第三方插件】->【安全模式】，打开对应的插件即可，每个插件的配置路径与核心插件一样，打开后会在配置列表多一个插件的配置选项；
Ⅱ、使用的插件列表 以下是我当前在用的插件列表：
1、外观美化类 cm-editor-syntax-highlight-obsidian 这是一款用于高亮代码块中的代码的插件； obsiidan-minimal-settings 支持对主题进行设置，没有深度使用，直接打开了对minimal主题的优化（ps：当前在用的主题是minimal）； 2、编辑增强类 dataview
基本语法 页面元数据 yml语法 YML必须写在文件最上方，需要写在 6 个横杠符号之间，yml 就可以被识别，例如： author: 鲁迅 where 和 sort 就可以直接使用你在 yml 中设置的 key 了。
目录索引 先看下基本效果：
table后边的字段是表格的列； where是过滤条件，可以使用页面的元数据，也可以使用yml的key； sort是对列表或表格数据进行排序；
标签索引 where的过滤条件可以以标签为索引进行过滤：
media-extended 在笔记中可以插入音频、视频等文件并在文件中打开； mx-bili-plugin 笔记中支持插入bilibili视频链接； obsidian-checklist-plugin 支持通过标签筛选待办在列表中显示； 3、功能扩展类 advanced-toolbar 手机工具栏扩展，手机编辑时有两排特殊符号按钮； calendar 日历插件，并且能够配合periodic-notes插件创建日记和周记，通过点击日历的日期或者周快速创建； periodic-notes 可以通过模板快速创建日、周、月、年记文件，并且可以配合calendar插件提高效率； homepage 为Obsidian工具栏增加一个homepage的按钮，可以快速退回到homepage页面(文件)； obsidian-mind-map 支持以脑图的方式，显示文章结构； quickadd 支持通过模板快速创建笔记； quick-explorer 在上方工具栏显示当前文件目录，并且支持快速求换； recent-files-obsidian 支持显示最近打开的文件列表； remember-cursor-position 记住打开的文件上次编辑所在位置，打开后仍在记录的位置显示； recent files 显示最近打开的文件，配合工作区功能可以提高笔记管理效率； 五、工作区布局 通过固定不同模式下的工作区布局，提高不同模式的工作效率；当前我常用的工作区有主工作台，和编辑模式；
Ⅰ、主工作台 先看看布局：
布局说明：
1：文件列表； 2：最近打开的文件； 3：编辑区； 4：局部链接； 5：笔记的脑图显示； 6：预览区； 7：笔记大纲； 8：日历； Ⅱ、编辑工作台 编辑工作台关闭所有小窗口，只有左右一个编辑区，一个预览区；通过CTL+O快速切换文件进行编辑；
Ⅲ、工作区保存和切换 通过左边工作区按钮进行保存和切换； 参考快捷键配置增加工作区切换快捷键，CTL+SHIFT+X：切换工作区； 结束 以上就是我使用Obsidian作为我的第二大脑系统的基本配置和使用，希望可以帮助大家了解Obsidian的使用；后边我会继续完善我的第二大脑系统的构建思路和方法。
标签 Index： #生产力-Index
Info： #Obsidian</content></entry></search>